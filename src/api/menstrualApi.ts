import axios from "./axiosInstance";

// Ki·ªÉu d·ª± ƒëo√°n chu k·ª≥
export interface Prediction {
  periodDays: number; // s·ªë ng√†y c√≥ kinh
  ovulationDay: number; // ng√†y r·ª•ng tr·ª©ng (th·ª© t·ª± trong chu k·ª≥)
  fertileStart: string; // ng√†y b·∫Øt ƒë·∫ßu v√πng m√†u m·ª°
  fertileEnd: string; // ng√†y k·∫øt th√∫c v√πng m√†u m·ª°
  ovulationDate: string; // ng√†y r·ª•ng tr·ª©ng (d·∫°ng date)
  nextPeriodDate: string; // ng√†y c√≥ kinh ti·∫øp theo
  status: string; // tr·∫°ng th√°i
  cycleLength: number; // s·ªë ng√†y chu k·ª≥
  periodStatus: string; // tr·∫°ng th√°i k·ª≥ kinh
  startDate: string;
}

// Ki·ªÉu chu k·ª≥ g·∫ßn nh·∫•t
export interface CurrentCycle {
  StartDate: string;
  PeriodLength: number;
  CycleLength: number;
  PredictedNextCycleStartDate: string;
}

// ‚úÖ Tr·∫£ v·ªÅ danh s√°ch ng√†y ƒë√£ log k·ª≥ kinh
export const getLoggedDates = async (): Promise<Date[]> => {
  const response = await axios.get("/menstrual/logged-dates");
  return response.data.map((d: string) => new Date(d));
};

// ‚úÖ Ghi nh·∫≠n k·ª≥ kinh (ƒë√£ chu·∫©n ho√° gi·ªù ƒë·ªÉ tr√°nh l·ªách ng√†y)
export const logPeriodDates = async (periodDates: Date[]): Promise<void> => {
  const normalizedDates = periodDates.map((date) => {
    const d = new Date(date);
    d.setHours(12, 0, 0, 0); // üëà ƒë·∫∑t gi·ªù gi·ªØa ng√†y ƒë·ªÉ kh√¥ng b·ªã l√πi ng√†y khi convert sang UTC
    return d.toISOString(); // üëà g·ª≠i d∆∞·ªõi d·∫°ng ISO string
  });

  await axios.post("/menstrual/log", {
    PeriodDates: normalizedDates,
  });
};

// ‚úÖ D·ª± ƒëo√°n r·ª•ng tr·ª©ng, v√πng m√†u m·ª°, ng√†y c√≥ kinh ti·∫øp theo
export const getPrediction = async (): Promise<Prediction> => {
  const response = await axios.get("/menstrual/fertility-status");
  const data = response.data;
  let startDate = data.StartDate || data.startDate || '';
  if (!startDate) {
    // N·∫øu kh√¥ng c√≥ startDate, l·∫•y t·ª´ prediction m·ªõi nh·∫•t c·ªßa all-predictions
    try {
      const all = await axios.get("/menstrual/all-predictions");
      if (Array.isArray(all.data) && all.data.length > 0) {
        startDate = all.data[all.data.length - 1].startDate || all.data[all.data.length - 1].StartDate || '';
      }
    } catch {}
  }
  return {
    startDate,
    periodDays: data.PeriodLength || data.periodDays || 5,
    ovulationDay: data.OvulationDay || data.ovulationDay || 14,
    fertileStart: data.FertileStart || data.fertileStart || '',
    fertileEnd: data.FertileEnd || data.fertileEnd || '',
    ovulationDate: data.OvulationDate || data.ovulationDate || '',
    nextPeriodDate: data.PredictedNextCycleStartDate || data.nextPeriodDate || '',
    status: data.Status || data.status || '',
    cycleLength: data.CycleLength || data.cycleLength || 28,
    periodStatus: data.PeriodStatus || data.periodStatus || '',
  };
};

// ‚úÖ L·∫•y th√¥ng tin chu k·ª≥ g·∫ßn nh·∫•t
export const getCurrentCycle = async (): Promise<CurrentCycle> => {
  const response = await axios.get("/menstrual/current-cycle-prediction");
  return response.data;
};

// L·∫•y danh s√°ch prediction cho nhi·ªÅu chu k·ª≥
export const getAllPredictions = async (): Promise<Prediction[]> => {
  const response = await axios.get("/menstrual/all-predictions");
  return response.data.map((data: any) => ({
    startDate: data.StartDate || data.startDate || '',
    periodDays: data.PeriodLength || data.periodDays || 5,
    ovulationDay: data.OvulationDay || data.ovulationDay || 14,
    fertileStart: data.FertileStart || data.fertileStart || '',
    fertileEnd: data.FertileEnd || data.fertileEnd || '',
    ovulationDate: data.OvulationDate || data.ovulationDate || '',
    nextPeriodDate: data.PredictedNextCycleStartDate || data.nextPeriodDate || '',
    status: data.Status || data.status || '',
    cycleLength: data.CycleLength || data.cycleLength || 28,
    periodStatus: data.PeriodStatus || data.periodStatus || '',
  }));
};
