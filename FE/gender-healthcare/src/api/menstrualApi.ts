import axios from "./axiosInstance";

// Ki·ªÉu d·ª± ƒëo√°n chu k·ª≥ - ƒë·ªìng b·ªô v·ªõi backend
export interface Prediction {
  startDate: string;
  periodLength: number; // s·ªë ng√†y c√≥ kinh
  cycleLength: number; // s·ªë ng√†y chu k·ª≥
  predictedNextCycleStartDate: string;
  ovulationDate: string; // ng√†y r·ª•ng tr·ª©ng
  fertileStart: string; // ng√†y b·∫Øt ƒë·∫ßu v√πng m√†u m·ª°
  fertileEnd: string; // ng√†y k·∫øt th√∫c v√πng m√†u m·ª°
  status: string; // tr·∫°ng th√°i
  periodStatus: string; // tr·∫°ng th√°i k·ª≥ kinh
}

// Ki·ªÉu chu k·ª≥ g·∫ßn nh·∫•t - ƒë·ªìng b·ªô v·ªõi backend
export interface CurrentCycle {
  startDate: string;
  periodLength: number;
  cycleLength: number;
  predictedNextCycleStartDate: string;
  averageCycleLength: number;
  averagePeriodLength: number;
  totalCyclesAvailable: number;
}

// Ki·ªÉu fertility status - ƒë·ªìng b·ªô v·ªõi backend
export interface FertilityStatus {
  ovulationDate: string;
  fertileStart: string;
  fertileEnd: string;
  nextPeriodDate: string;
  status: string;
  periodStatus: string;
}

// ‚úÖ Tr·∫£ v·ªÅ danh s√°ch ng√†y ƒë√£ log k·ª≥ kinh
export const getLoggedDates = async (): Promise<Date[]> => {
  const response = await axios.get("/menstrual/logged-dates");
  return response.data.map((d: string) => new Date(d));
};

// ‚úÖ Ghi nh·∫≠n k·ª≥ kinh (ƒë√£ chu·∫©n ho√° gi·ªù ƒë·ªÉ tr√°nh l·ªách ng√†y)
export const logPeriodDates = async (periodDates: Date[]): Promise<void> => {
  const normalizedDates = periodDates.map((date) => {
    const d = new Date(date);
    d.setHours(12, 0, 0, 0); // üëà ƒë·∫∑t gi·ªù gi·ªØa ng√†y ƒë·ªÉ kh√¥ng b·ªã l√πi ng√†y khi convert sang UTC
    return d.toISOString(); // üëà g·ª≠i d∆∞·ªõi d·∫°ng ISO string
  });

  await axios.post("/menstrual/log", {
    PeriodDates: normalizedDates,
  });
};

// ‚úÖ D·ª± ƒëo√°n r·ª•ng tr·ª©ng, v√πng m√†u m·ª°, ng√†y c√≥ kinh ti·∫øp theo
export const getPrediction = async (): Promise<Prediction> => {
  const response = await axios.get("/menstrual/fertility-status");
  const data = response.data;
  
  return {
    startDate: data.startDate || '',
    periodLength: data.periodLength || 5,
    cycleLength: data.cycleLength || 28,
    predictedNextCycleStartDate: data.nextPeriodDate || '',
    ovulationDate: data.ovulationDate || '',
    fertileStart: data.fertileStart || '',
    fertileEnd: data.fertileEnd || '',
    status: data.status || '',
    periodStatus: data.periodStatus || '',
  };
};

// ‚úÖ L·∫•y th√¥ng tin chu k·ª≥ g·∫ßn nh·∫•t
export const getCurrentCycle = async (): Promise<CurrentCycle> => {
  const response = await axios.get("/menstrual/cycle-summary");
  return response.data;
};

// L·∫•y danh s√°ch prediction cho nhi·ªÅu chu k·ª≥
export const getAllPredictions = async (): Promise<Prediction[]> => {
  const response = await axios.get("/menstrual/all-predictions");
  return response.data.map((data: any) => ({
    startDate: data.startDate || '',
    periodLength: data.periodLength || 5,
    cycleLength: data.cycleLength || 28,
    predictedNextCycleStartDate: data.predictedNextCycleStartDate || '',
    ovulationDate: data.ovulationDate || '',
    fertileStart: data.fertileStart || '',
    fertileEnd: data.fertileEnd || '',
    status: data.status || '',
    periodStatus: data.periodStatus || '',
  }));
};

// L·∫•y analytics cho chu k·ª≥
export const getCycleAnalytics = async () => {
  const response = await axios.get("/menstrual/analytics");
  return response.data;
};
